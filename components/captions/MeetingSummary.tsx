// components/captions/MeetingSummary.tsx
'use client';

import React from 'react';
import { NimCaptionSession } from '@/lib/captions/nvidia-types';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';

interface MeetingSummaryProps {
  session: NimCaptionSession | null;
  onGenerateSummary?: () => Promise<void>;
  onExtractActionItems?: () => Promise<void>;
  isProcessing?: boolean;
}

export function MeetingSummary({
  session,
  onGenerateSummary,
  onExtractActionItems,
  isProcessing = false,
}: MeetingSummaryProps) {
  const hasTranscript = session && session.transcript.length > 0;
  const hasSummary = session?.summary;
  const hasActionItems = session?.actionItems && session.actionItems.length > 0;

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text).then(() => {
      // You could add a toast notification here
      console.log('Copied to clipboard');
    });
  };

  const downloadSummary = () => {
    if (!session?.summary) return;

    const content = `
Meeting Summary - ${session.name}
Date: ${session.startTime.toLocaleDateString()}
Duration: ${Math.round((session.endTime.getTime() - session.startTime.getTime()) / 60000)} minutes

SUMMARY:
${session.summary}

${hasActionItems ? `ACTION ITEMS:
${session.actionItems?.map((item, i) => `${i + 1}. ${item}`).join('\n')}` : ''}

Generated by NVIDIA AI
    `.trim();

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `meeting-summary-${session.startTime.toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (!session) {
    return (
      <Card className="w-full max-w-4xl">
        <CardHeader>
          <CardTitle>Meeting Summary</CardTitle>
          <CardDescription>
            AI-powered summary will appear here after your meeting
          </CardDescription>
        </CardHeader>
        <CardContent>
          <p className="text-center text-gray-500 py-8">
            No active meeting session
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="w-full max-w-4xl space-y-6">
      {/* Meeting Info */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>{session.name}</span>
            <span className="text-sm font-normal text-gray-500">
              {session.startTime.toLocaleString()}
            </span>
          </CardTitle>
          <CardDescription>
            Duration: {Math.round((session.endTime.getTime() - session.startTime.getTime()) / 60000)} minutes
            ‚Ä¢ {session.transcript.filter(t => t.isFinal).length} captions
            ‚Ä¢ {session.transcript.filter(t => t.processingStatus === 'enhanced').length} AI enhanced
          </CardDescription>
        </CardHeader>
      </Card>

      {/* Summary Section */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>üìù Meeting Summary</span>
            <div className="flex gap-2">
              {hasSummary && (
                <>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => copyToClipboard(session.summary!)}
                  >
                    Copy
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={downloadSummary}
                  >
                    Download
                  </Button>
                </>
              )}
              {onGenerateSummary && (
                <Button
                  size="sm"
                  onClick={onGenerateSummary}
                  disabled={!hasTranscript || isProcessing}
                >
                  {isProcessing ? 'Generating...' : hasSummary ? 'Regenerate' : 'Generate Summary'}
                </Button>
              )}
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent>
          {hasSummary ? (
            <Textarea
              value={session.summary}
              readOnly
              className="min-h-[200px] resize-none"
              placeholder="AI-generated summary will appear here..."
            />
          ) : (
            <div className="min-h-[200px] flex items-center justify-center border border-dashed border-gray-300 rounded-lg">
              <div className="text-center">
                <p className="text-gray-500 mb-4">
                  {hasTranscript 
                    ? 'Click "Generate Summary" to create an AI-powered meeting summary'
                    : 'Start recording to generate a summary'
                  }
                </p>
                {isProcessing && (
                  <div className="flex items-center justify-center gap-2">
                    <div className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin" />
                    <span className="text-blue-600">Generating summary with NVIDIA AI...</span>
                  </div>
                )}
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Action Items Section */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>‚úÖ Action Items</span>
            <div className="flex gap-2">
              {hasActionItems && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => copyToClipboard(session.actionItems!.join('\n'))}
                >
                  Copy
                </Button>
              )}
              {onExtractActionItems && (
                <Button
                  size="sm"
                  onClick={onExtractActionItems}
                  disabled={!hasTranscript || isProcessing}
                >
                  {isProcessing ? 'Extracting...' : hasActionItems ? 'Re-extract' : 'Extract Items'}
                </Button>
              )}
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent>
          {hasActionItems ? (
            <ul className="space-y-2">
              {session.actionItems!.map((item, index) => (
                <li key={index} className="flex items-start gap-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                  <span className="flex-shrink-0 w-6 h-6 bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400 rounded-full flex items-center justify-center text-sm font-medium">
                    {index + 1}
                  </span>
                  <span className="flex-1 text-sm">{item}</span>
                </li>
              ))}
            </ul>
          ) : (
            <div className="min-h-[100px] flex items-center justify-center border border-dashed border-gray-300 rounded-lg">
              <p className="text-gray-500 text-center">
                {hasTranscript 
                  ? 'Click "Extract Items" to identify action items and next steps'
                  : 'Action items will be extracted from your meeting transcript'
                }
              </p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}